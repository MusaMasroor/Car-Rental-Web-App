generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    firstName     String
    lastName      String
    email         String?   @unique
    password      String
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    roles         Role      @default(USER)
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    USER
    ADMIN
}

model Car {
    id              String @id @default(cuid())
    city_mpg        Int
    class           String
    combination_mpg Int
    cylinders       Int
    displacement    Int
    drive           String
    fuel_type       String
    highway_mpg     Int
    make            String
    model           String
    transmission    String
    year            Int
    Rent            Rent[]
}

model Rent {
    id        String   @id @default(cuid())
    name      String
    email     String
    phone     String
    address   String
    car       Car      @relation(fields: [carId], references: [id])
    carId     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Contact {
    id        String   @id @default(cuid())
    name      String
    email     String
    phone     String
    address   String
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
